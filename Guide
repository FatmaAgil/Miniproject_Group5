Game Overview:
The Sphere Snake Game is a modern, visually enhanced version of the classic Snake game, designed with gradient effects for both the snake and the background. The game uses Python and Pygame to create a smooth, elegant aesthetic that makes it more engaging and visually appealing.

Gameplay Instructions:
Objective: Control the snake and guide it to "eat" food items to grow longer and increase your score.
Controls:
Use the arrow keys to move the snake:
Up Arrow - Moves up
Down Arrow - Moves down
Left Arrow - Moves left
Right Arrow - Moves right
Rules:
The game ends if the snake collides with the screen boundaries or itself.
The game speeds up as the snake collects more food, adding to the challenge.
A congratulatory message appears when you reach a score of 100.
Development Process and Key Features:
Setting Up Pygame:

We began by importing Pygame and initializing it. This library is essential for handling graphics, game loops, and events.
Creating the Display:

We created a display surface with dimensions of 800x600 pixels.
A gradient background was added to give the game a polished look, transitioning from light sky blue at the top to midnight blue at the bottom.
Adding Gradient Effects:

Vertical Gradient Background:
A function called create_vertical_gradient_surface() was developed to create a smooth vertical gradient effect.
It gradually changes the color from top to bottom, giving the game depth.
Radial Gradient Circles for Snake and Food:
Using create_gradient_circle_surface(), the snake and food items were made to have a radial gradient effect, giving them a spherical, 3D appearance.
Implementing the Snake:

The Snake class was created to manage the snake’s properties and behaviors, including its movement, length, and collision detection.
As the snake consumes food, it grows in length, and the game speed increases slightly to add difficulty.
Creating the Food:

The Food class handles food creation and placement on the screen.
Each time the snake eats food, a new food item appears in a random position, encouraging the player to continue navigating the screen.
Handling Events:

Event Loop: We included an event loop to detect keyboard inputs and update the game state.
Collision Detection: The game checks if the snake collides with the screen boundaries or itself. If so, the game ends with a "Game Over" message.
Score Display: The score is displayed at the top-left corner of the screen, updating each time the snake consumes food.
Challenges Faced and Solutions:
Smooth Movement:

Initially, making the snake movement smooth while adding the gradient effects was challenging. We refined the update rate and carefully adjusted the frame rate to keep performance high.
Gradient Background Design:

Creating a gradient that didn’t interfere with gameplay was a key focus. We used soft colors to ensure visual appeal without overwhelming the player.
Increasing Game Difficulty:

To maintain a balance in difficulty, we slowly increased the snake’s speed after each food item. This prevents the game from becoming too challenging too quickly.
Future Enhancements:
Obstacles: Adding obstacles that the snake must avoid to add extra difficulty.
Sound Effects: Including sound effects for movements, eating food, and game over scenarios.
High Score Tracking: Keeping track of the highest score achieved during gameplay.
Conclusion:
This project showcases how Python and Pygame can be used to recreate a classic game with a modern twist. We aimed to make the game both challenging and visually pleasing, encouraging players to enjoy the nostalgia of Snake with a fresh experience.

